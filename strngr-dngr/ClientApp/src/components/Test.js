import "../styles/App.css"

import React from 'react';
import { actionCreators } from '../store/Stranger';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';

class Test extends React.PureComponent {
  constructor(props) {
    super(props);
  }

  identityCheckResults = {
    "request": {
      "primary.address.city": "Ashland",
      "primary.phone": "6464806649",
      "ip_address": "64.124.61.215",
      "primary.name": "Drama Number",
      "primary.address.street_line_1": "302 Gorham Ave",
      "primary.email_address": "medjalloh1@yahoo.com",
      "primary.address.postal_code": "59004",
      "api_key": "1f32c3cc0b27411fa723e45a79ab83f5",
      "primary.address.state_code": "MT"
    },
    "primary_phone_checks": {
      "error": null,
      "warnings": [
  
      ],
      "is_valid": true,
      "country_code": "US",
      "is_commercial": false,
      "line_type": "Non-fixed VOIP",
      "carrier": "Twilio",
      "is_prepaid": null,
      "match_to_name": "No match",
      "match_to_address": "Country match",
      "subscriber": {
        "name": "Jisek Catania",
        "age_range": null
      }
    },
    "secondary_phone_checks": null,
    "primary_address_checks": {
      "error": null,
      "warnings": [  
      ],
      "is_valid": true,
      "input_completeness": "Complete",
      "match_to_name": "No match",
      "resident": {
        "name": "Czarina N Quindara",
        "age_range": {
          "from": 25,
          "to": 29
        }
      },
      "is_commercial": false,
      "is_forwarder": false,
      "type": "Single unit"
    },
    "secondary_address_checks": null,
    "primary_email_address_checks": {
      "error": null,
      "warnings": [
  
      ],
      "is_valid": true,
      "is_autogenerated": false,
      "is_disposable": false,
      "email_first_seen_days": 4876,
      "email_domain_creation_days": 8835,
      "match_to_name": "No match",
      "match_to_address": "Country match",
      "registered_owner": {
        "name": "Mr. Mohamed Jalloh",
        "age_range": null
      }
    },
    "secondary_email_address_checks": null,
    "ip_address_checks": {
      "error": null,
      "warnings": [
  
      ],
      "is_valid": true,
      "proxy_risk": false,
      "geolocation": {
        "postal_code": "28209",
        "city_name": "Charlotte",
        "subdivision": "North Carolina",
        "country_name": "United States",
        "country_code": "US",
        "continent_code": "NA"
      },
      "match_to_primary_name": "No match",
      "match_to_secondary_name": null,
      "distance_from_primary_address": 1510,
      "distance_from_secondary_address": null,
      "distance_from_primary_phone": 558,
      "distance_from_secondary_phone": null
    },
    "identity_check_score": 318
  };

    matchFound = (matchToName) => this.identityCheckResults.primary_address_checks.match_to_name === "Match";
    
    render() {
      const {request, primary_address_checks, primary_phone_checks} = this.identityCheckResults;
      
      return(     

        <div className="App">
          <div className="App-header">
            <h1>Summary</h1>
            {/* <div className="box">
              <div className="header">Photo Image Knowledge</div>
              <div className="body">Some knowledge about the photo</div>
            </div> */}

            <div className="box">
              <div className="header">Identity Check</div>
              <div className="body">
                <div className="section">
                  <div className="header">Address</div>
                  <div className="body">
                    The address provided by {request["primary.name"]} is a <b>{primary_address_checks.is_valid ? "valid" : "invalid"}</b> address.

                    We <b>{this.matchFound(primary_address_checks.match_to_name) ? "found" : "did not find"} a match</b> for this stranger to the address provided at {request["primary.address.street_line_1"]} in {request["primary.address.city"]}, {request["primary.address.state_code"]} {request["primary.address.postal_code"]}.
                    {primary_address_checks.resident && `  The address ${this.matchFound(primary_address_checks.match_to_name) ? "indeed" : ""} belongs to ${primary_address_checks.resident.name}${primary_address_checks.resident.age_range ? `, aged between ${primary_address_checks.resident.age_range.from} and ${primary_address_checks.resident.age_range.to}.`: ""}`}
                    
                  </div>
                </div>
                
                <div className="section">
                  <div className="header">Phone</div>
                  <div className="body">
                    The phone number provided by {request["primary.name"]} is probably <b>{primary_phone_checks.is_valid ? "valid" : "invalid"}</b>.

                    We <b>{this.matchFound(primary_phone_checks.match_to_address || primary_phone_checks.match_to_name) ? "found" : "did not find"} a match</b> for the number provided by this stranger at {request["primary.phone"]}.
                    {primary_address_checks.subscriber && `The phone number ${this.matchFound(primary_phone_checks.match_to_name) ? "indeed" : ""} belongs to ${primary_phone_checks.subscriber.name}${primary_phone_checks.age_range && `, aged between ${primary_phone_checks.age_range.from} and ${primary_phone_checks.age_range.to}.`}`}
                  </div>
                </div>

                
                <div className="section">
                  <div className="header">Email</div>
                  <div className="body"></div>
                </div>
                
                <h3>Overall Stranger Danger Score: {100 - (this.identityCheckResults.identity_check_score / 500 * 100)}%</h3>
              </div>
            </div>         
          </div>
        </div>
      );
    }
}
   
export default connect(
  state => state.stranger,
  dispatch => bindActionCreators(actionCreators, dispatch)
)(Test);